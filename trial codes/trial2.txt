main.py:

import os
import torch
import numpy as np
from fastapi import FastAPI, UploadFile, File, HTTPException, Form
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from PIL import Image
import uvicorn
import torchvision.models as models
import torchvision.transforms as transforms
from sklearn.metrics.pairwise import cosine_similarity
import openai
import logging
from dotenv import load_dotenv
import cv2
from io import BytesIO
from base64 import b64encode, b64decode
import base64

# Load environment variables from .env file
load_dotenv()

# Initialize logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize OpenAI Client
client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))  # Use environment variable for API key

# Initialize FastAPI
app = FastAPI()

# Enable CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Allow all origins for development
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Define Directories
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
UPLOAD_FOLDER = os.path.join(BASE_DIR, "uploads")
FURNITURE_FOLDER = os.path.join(BASE_DIR, "furniture_models/sofas")
THUMBNAIL_FOLDER = os.path.join(FURNITURE_FOLDER, "thumbnails")

os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# Detect CUDA availability
device = "cuda" if torch.cuda.is_available() else "cpu"
print(f"Using device: {device}")

# Global variables for storing images and masks
GLOBAL_IMAGE = None
GLOBAL_MASK = None

# Load Pre-trained ResNet for Feature Extraction
resnet = models.resnet50(weights='DEFAULT')  # Updated to use 'weights' instead of 'pretrained'
resnet = torch.nn.Sequential(*list(resnet.children())[:-1])
resnet.eval()
resnet.to(device)

# Image Preprocessing for ResNet
preprocess = transforms.Compose([
    transforms.Resize(256),
    transforms.CenterCrop(224),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])

logger.info("Models Loaded Successfully ✅")

# Sofa Details (Prices and Descriptions)
sofa_details = {
    "black_sofa": {
        "name": "Black Sofa",
        "price": 1000.00,
        "description": "A sleek and modern black sofa, perfect for contemporary spaces."
    },
    "Black_sofa_set": {
        "name": "Black Sofa Set",
        "price": 1500.00,
        "description": "A luxurious black sofa set, perfect for modern living rooms."
    },
    "blue_sofa": {
        "name": "Blue Sofa",
        "price": 1200.00,
        "description": "A stylish blue sofa, ideal for adding a pop of color to your space."
    },
    "modern_sofa2": {
        "name": "Modern Sofa 2",
        "price": 1100.00,
        "description": "A stylish and comfortable sofa, ideal for modern spaces."
    }
}

# Extract Features from an Image
def extract_features(image_path):
    try:
        logger.info(f"Extracting features from: {image_path}")
        image = Image.open(image_path).convert("RGB")
        image = preprocess(image).unsqueeze(0).to(device)
        with torch.no_grad():
            features = resnet(image)
        return features.cpu().numpy().flatten()
    except Exception as e:
        logger.error(f"Error extracting features: {e}")
        raise

# Find the Most Suitable Sofa with Reasoning
def find_most_suitable_sofa(room_features):
    try:
        logger.info("Finding the most suitable sofa...")
        sofa_features = {}
        for filename in os.listdir(THUMBNAIL_FOLDER):
            if filename.endswith(".jpg"):
                sofa_path = os.path.join(THUMBNAIL_FOLDER, filename)
                logger.info(f"Processing thumbnail: {sofa_path}")

                features = extract_features(sofa_path)
                sofa_features[filename] = features

        if not sofa_features:
            logger.info("No sofa features found.")
            return None, None, "No furniture available."

        similarities = {sofa: cosine_similarity([room_features], [features])[0][0] for sofa, features in sofa_features.items()}
        sorted_sofas = sorted(similarities.items(), key=lambda x: x[1], reverse=True)

        most_suitable_sofa = sorted_sofas[0][0]
        similarity_score = sorted_sofas[0][1]
        reason = f"This sofa matches the room's style and color scheme with a similarity score of {similarity_score:.2f}."

        logger.info(f"Most suitable sofa: {most_suitable_sofa}, Similarity score: {similarity_score}")
        return most_suitable_sofa, similarity_score, reason, sorted_sofas
    except Exception as e:
        logger.error(f"Error finding suitable sofa: {e}")
        raise

# Inpaint Sofa into the Uploaded Image using OpenCV
def inpaint_sofa_into_image(uploaded_image_path, sofa_image_path, mask_path, output_path):
    try:
        uploaded_image = cv2.imread(uploaded_image_path)
        sofa_image = cv2.imread(sofa_image_path)
        mask = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)

        # Ensure binary mask
        mask = cv2.threshold(mask, 1, 255, cv2.THRESH_BINARY)[1]

        # Resize everything to match original image dimensions
        sofa_image = cv2.resize(sofa_image, (uploaded_image.shape[1], uploaded_image.shape[0]))
        mask = cv2.resize(mask, (uploaded_image.shape[1], uploaded_image.shape[0]))

        # Remove existing sofa by setting pixels to black where the mask is applied
        background = uploaded_image.copy()
        background[mask == 255] = [0, 0, 0]

        # Overlay the new sofa onto the background
        new_sofa = cv2.bitwise_and(sofa_image, sofa_image, mask=mask)
        final_image = cv2.add(background, new_sofa)

        cv2.imwrite(output_path, final_image)
        return output_path
    except Exception as e:
        logger.error(f"Error in inpainting: {e}")
        raise

# Upload Room Image and Suggest Suitable Furniture
@app.post("/upload/")
async def upload_image(file: UploadFile = File(...)):
    global GLOBAL_IMAGE

    try:
        logger.info("Uploading image...")
        image_data = await file.read()
        image = Image.open(BytesIO(image_data)).convert("RGB")
        GLOBAL_IMAGE = np.array(image)  # Store image globally for segmentation

        # Save the image to disk for feature extraction
        image_path = os.path.join(UPLOAD_FOLDER, file.filename)
        with open(image_path, "wb") as buffer:
            buffer.write(image_data)

        logger.info("Image saved successfully.")

        room_features = extract_features(image_path)
        logger.info("Room features extracted.")

        best_sofa, similarity_score, reason, sorted_sofas = find_most_suitable_sofa(room_features)
        logger.info(f"Best sofa: {best_sofa}, Similarity score: {similarity_score}, Reason: {reason}")

        if not best_sofa:
            logger.info("No suitable furniture found.")
            return JSONResponse(content={"message": "No suitable furniture found."})

        sofa_name = best_sofa.replace(".jpg", "")
        sofa_info = sofa_details.get(sofa_name, {})

        response_data = {
            "message": "Image uploaded successfully",
            "image_url": f"http://127.0.0.1:8000/uploads/{file.filename}",
            "suggested_furniture": {
                "name": sofa_name,
                "thumbnail": f"http://127.0.0.1:8000/thumbnails/{best_sofa}",
                "glb_model": f"http://127.0.0.1:8000/furniture/{best_sofa.replace('.jpg', '.glb')}",
                "similarity_score": float(similarity_score),
                "reason": reason,
                "price": sofa_info.get("price", "N/A"),
                "description": sofa_info.get("description", "No description available.")
            },
            "sorted_sofas": [(sofa, float(score)) for sofa, score in sorted_sofas]
        }

        logger.info(f"Returning response: {response_data}")
        return JSONResponse(content=response_data)
    except Exception as e:
        logger.error(f"Error in /upload/ endpoint: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# Inpainting API
@app.post("/inpainting-image")
async def inpainting(suggested_furniture: str = Form(...), mask: str = Form(...)):
    global GLOBAL_IMAGE

    if GLOBAL_IMAGE is None:
        raise HTTPException(status_code=400, detail="No image uploaded.")

    try:
        # Decode the base64 mask received from frontend (SegDrawer)
        mask_data = b64decode(mask)
        mask_image = Image.open(BytesIO(mask_data)).convert("L")  # Convert to grayscale
        mask_np = np.array(mask_image)

        # Load the original room image
        org_img = Image.fromarray(GLOBAL_IMAGE)

        # Load the suggested furniture image
        furniture_img_path = os.path.join(THUMBNAIL_FOLDER, suggested_furniture)
        if not os.path.exists(furniture_img_path):
            raise HTTPException(status_code=404, detail="Suggested furniture image not found.")

        furniture_img = Image.open(furniture_img_path).convert("RGBA")
        furniture_img = furniture_img.resize(mask_image.size)  # Resize to fit mask

        # Convert to NumPy array for processing
        org_np = np.array(org_img)
        furniture_np = np.array(furniture_img)

        # Replace only the masked area
        inpainted_np = org_np.copy()
        inpainted_np[mask_np > 0] = furniture_np[mask_np > 0]  

        # Convert back to image
        final_image = Image.fromarray(inpainted_np)

        # Convert to base64 for frontend
        buffered = BytesIO()
        final_image.save(buffered, format="PNG")
        final_image_base64 = b64encode(buffered.getvalue()).decode("utf-8")

        return JSONResponse(content={"image": final_image_base64, "message": "Furniture replaced successfully!"})

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Inpainting error: {str(e)}")

# Convert PIL image to base64 for frontend
def pil_image_to_base64(image):
    buffered = BytesIO()
    image.save(buffered, format="PNG")
    return b64encode(buffered.getvalue()).decode("utf-8")

# Handle User Feedback
@app.post("/feedback/")
async def handle_feedback(feedback: dict):
    try:
        user_feedback = feedback.get("feedback", "").lower()
        sorted_sofas = feedback.get("sorted_sofas", [])
        uploaded_image_filename = feedback.get("uploaded_image_filename")

        if GLOBAL_MASK is None:
            raise HTTPException(status_code=400, detail="No segmentation mask found.")

        # Save the mask locally
        mask_path = os.path.join(UPLOAD_FOLDER, f"mask_{uploaded_image_filename}")
        GLOBAL_MASK.save(mask_path)  # Save as PNG file

        # Proceed with inpainting
        uploaded_image_path = os.path.join(UPLOAD_FOLDER, uploaded_image_filename)
        sofa_image_path = os.path.join(THUMBNAIL_FOLDER, sorted_sofas[0][0])
        inpainted_image_path = os.path.join(UPLOAD_FOLDER, f"inpainted_{uploaded_image_filename}")

        inpaint_sofa_into_image(uploaded_image_path, sofa_image_path, mask_path, inpainted_image_path)

        return JSONResponse(content={
            "message": "Furniture replaced successfully!",
            "inpainted_image_url": f"http://127.0.0.1:8000/uploads/inpainted_{uploaded_image_filename}"
        })

    except Exception as e:
        logger.error(f"Error in /feedback/ endpoint: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# AI Chatbot API
@app.post("/chat")
async def chat(message: dict):
    try:
        user_message = message.get("message", "").lower()
        if not user_message:
            raise HTTPException(status_code=400, detail="No message provided")

        logger.info(f"User     Message: {user_message}")

        # Show furniture inventory
        if "sofa" in user_message or "bed" in user_message or "furniture" in user_message or "inventory" in user_message:
            if "bed" in user_message:
                return JSONResponse(content={"message": "Beds will be added to the inventory soon! For now, here are the available sofas:"})

            furniture_list = []
            for filename in os.listdir(FURNITURE_FOLDER):
                if filename.endswith(".glb"):
                    sofa_name = filename.replace(".glb", "")
                    sofa_info = sofa_details.get(sofa_name, {})
                    thumbnail_filename = filename.replace(".glb", ".jpg")
                    thumbnail_path = os.path.join(THUMBNAIL_FOLDER, thumbnail_filename)
                    logger.info(f"Checking thumbnail path: {thumbnail_path}")

                    if os.path.exists(thumbnail_path):
                        thumbnail_url = f"http://127.0.0.1:8000/thumbnails/{thumbnail_filename}"
                        furniture_list.append({
                            "name": sofa_name,
                            "thumbnail": thumbnail_url,
                            "glb_model": f"http://127.0.0.1:8000/furniture/{filename}",
                            "price": sofa_info.get("price", "N/A"),
                            "description": sofa_info.get("description", "No description available.")
                        })
                    else:
                        logger.info(f"Thumbnail not found for: {filename}")

            if not furniture_list:
                logger.info("No furniture items found in the inventory.")

            return JSONResponse(content={"message": "Here is the furniture inventory:", "inventory": furniture_list})

        # Default Chatbot Response
        logger.info("Sending request to OpenAI...")
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": user_message}]
        )
        logger.info("OpenAI response received.")

        chatbot_response = response.choices[0].message.content
        return JSONResponse(content={"message": chatbot_response})
    except Exception as e:
        logger.error(f"Error in /chat endpoint: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# Serve Static Files
app.mount("/uploads", StaticFiles(directory=UPLOAD_FOLDER), name="uploads")
app.mount("/thumbnails", StaticFiles(directory=THUMBNAIL_FOLDER), name="thumbnails")
app.mount("/furniture", StaticFiles(directory=FURNITURE_FOLDER), name="furniture")

# Run FastAPI
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)

index.html:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AR Furniture App</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin: 0;
            padding: 0;
        }
        #chatbox {
            width: 60%;
            height: 300px;
            overflow-y: scroll;
            border: 1px solid #ccc;
            padding: 10px;
            margin: 10px auto;
            text-align: left;
            background-color: #f9f9f9;
        }
        #inventory-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 10px;
            margin-top: 20px;
        }
        .thumbnail {
            width: 120px;
            height: 120px;
            object-fit: cover;
            border-radius: 5px;
            border: 1px solid #ddd;
            cursor: pointer;
        }
        #ar-viewer {
            display: none;
            margin-top: 20px;
        }
        model-viewer {
            width: 100%;
            height: 500px;
        }
        #uploaded-image {
            max-width: 90%;
            height: auto;
            margin: 20px auto;
            display: block;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            cursor: crosshair; /* Indicate the image is clickable */
        }
        #inpainted-image-section {
            margin-top: 20px;
            position: relative;
        }
        #inpaintedImage {
            max-width: 90%;
            height: auto;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        #mask-canvas {
            position: absolute;
            top: 0;
            left: 0;
            cursor: crosshair;
        }
        .image-container {
            position: relative;
            display: inline-block;
            width: fit-content; /* Adjust to fit the image */
            margin: 20px auto;
        }

        #selection-canvas, #mask-canvas {
            position: absolute;
            top: 0;
            left: 0;
            pointer-events: none;
            width: 100%; /* Match the uploaded image width */
            height: 100%; /* Match the uploaded image height */
        }
    </style>
    <!-- Load model-viewer component -->
    <script type="module" src="https://unpkg.com/@google/model-viewer/dist/model-viewer.min.js"></script>
    <!-- Add SegDrawer Library -->
    <script src="https://cdn.jsdelivr.net/gh/lujiazho/SegDrawer@main/dist/segdrawer.min.js"></script>
</head>
<body>
    <h1>AR Furniture App</h1>
    <div id="chatbox"></div>
    <input type="text" id="userInput" placeholder="Type your message..." onkeypress="handleKeyPress(event)">
    <button onclick="sendMessage()">Send</button>

    <div id="image-upload-section">
        <h2>Upload Room Image</h2>
        <input type="file" id="imageUpload" accept="image/*">
        <button onclick="uploadImage()">Upload Image</button>
        <img id="uploaded-image" src="" alt="Uploaded Image" style="display: none; max-width: 90%; border-radius: 10px;">
    </div>
    
    <h2>Furniture Inventory</h2>
    <div id="inventory-container"></div>

    <div id="suggested-furniture-section" style="display: none;">
        <h2>Best Matched Furniture</h2>
        <img id="suggestedFurnitureImage" src="" alt="Suggested Furniture">
        <p id="suggestedFurnitureName"></p>
        <p id="suggestedFurniturePrice"></p>
        <p id="suggestedFurnitureDescription"></p>
        <button onclick="handleUserResponse('yes')">Yes</button>
        <button onclick="handleUserResponse('no')">No</button>
    </div>

    <div id="inpainted-image-section" style="display: none;">
        <h2>Inpainted Image</h2>
        <img id="inpaintedImage" src="" alt="Inpainted Image">
        <div id="controls">
            <label for="opacity">Opacity:</label>
            <input type="range" id="opacity" min="0" max="1" step="0.1" value="1" oninput="updateOpacity()">
            <button onclick="moveSofa(-10, 0)">←</button>
            <button onclick="moveSofa(10, 0)">→</button>
            <button onclick="moveSofa(0, -10)">↑</button>
            <button onclick="moveSofa(0, 10)">↓</button>
            <button onclick="resizeSofa(1.1)">+</button>
            <button onclick="resizeSofa(0.9)">-</button>
        </div>
    </div>

    <div id="ar-viewer">
        <h2>View in AR</h2>
        <model-viewer
            id="ar-model"
            src=""
            ar
            ar-modes="scene-viewer quick-look"
            camera-controls
            auto-rotate
            shadow-intensity="1"
            environment-image="neutral"
            exposure="1.5">
        </model-viewer>
    </div>

    <script>
        const backendUrl = "http://127.0.0.1:8000";
        let uploadedImageUrl = "";
        let selectedFurniture = "";
        let sortedSofas = [];
        let segDrawer;

        // Function to display chatbot messages
        function addChatbotMessage(message) {
            const chatbox = document.getElementById("chatbox");
            const newMessage = document.createElement("p");
            newMessage.innerHTML = `<strong>Chatbot:</strong> ${message}`;
            chatbox.appendChild(newMessage);
            chatbox.scrollTop = chatbox.scrollHeight;
        }

        // Handle Enter key press
        function handleKeyPress(event) {
            if (event.key === "Enter") {
                sendMessage();
            }
        }

        // Upload Image and Get Suggested Furniture
        async function uploadImage() {
            const fileInput = document.getElementById("imageUpload");
            const file = fileInput.files[0];

            if (!file) {
                alert("Please select an image.");
                return;
            }

            let formData = new FormData();
            formData.append("file", file);

            try {
                const response = await fetch(`${backendUrl}/upload/`, {
                    method: "POST",
                    body: formData,
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                console.log("Backend Response:", result);

                uploadedImageUrl = result.image_url;

                // Display the uploaded image
                const uploadedImage = document.getElementById("uploaded-image");
                uploadedImage.src = uploadedImageUrl;
                uploadedImage.style.display = "block";

                // Display suggested furniture section
                if (result.suggested_furniture) {
                    document.getElementById("suggestedFurnitureName").innerText = `Best Match: ${result.suggested_furniture.name}`;
                    document.getElementById("suggestedFurnitureImage").src = result.suggested_furniture.thumbnail;
                    document.getElementById("suggestedFurniturePrice").innerText = `Price: $${result.suggested_furniture.price}`;
                    document.getElementById("suggestedFurnitureDescription").innerText = `Description: ${result.suggested_furniture.description}`;
                    document.getElementById("suggested-furniture-section").style.display = "block";

                    addChatbotMessage(`We recommend ${result.suggested_furniture.name}. ${result.suggested_furniture.reason}`);
                    addChatbotMessage("Is this okay? (Click 'Yes' or 'No')");

                    sortedSofas = result.sorted_sofas;
                } else {
                    addChatbotMessage("No suitable furniture found.");
                }   
            } catch (error) {
                console.error("Upload failed:", error);
                alert("Image upload failed. Check the console for details.");
            }
        }


        // Handle user response to suggested furniture
        function handleUserResponse(response) {
            console.log("User response:", response);

            if (response === "yes") {
                console.log("User clicked 'Yes'. Showing segmentation tools...");

                // Re-display the uploaded image below suggested furniture
                document.getElementById("uploaded-image").style.display = "block";

                // Show SegDrawer and Confirm Selection Button
                document.getElementById("mask-canvas").style.display = "block";
                document.getElementById("confirmSelectionButton").style.display = "block";

                // Initialize SegDrawer for interactive segmentation
                initializeSegDrawer();

                // Hide suggested furniture section
                document.getElementById("suggested-furniture-section").style.display = "none";

                addChatbotMessage("Please draw the area where you want to replace furniture.");
            } else {
                console.log("User clicked 'No'. Showing next best option...");
                getNextBestFurniture();  // Implement a function to cycle through sorted sofas
            }
        }

        function getNextBestFurniture() {
            console.log("Selecting the next best match...");
    
            if (sortedSofas.length > 1) {
                sortedSofas.shift(); // Remove the first (current) sofa

                const nextSofa = sortedSofas[0][0]; // Get the next best match

                document.getElementById("suggestedFurnitureName").innerText = `Best Match: ${nextSofa}`;
                document.getElementById("suggestedFurnitureImage").src = `http://127.0.0.1:8000/thumbnails/${nextSofa}`;
                document.getElementById("suggested-furniture-section").style.display = "block";

                addChatbotMessage(`How about this: ${nextSofa}?`);
            } else {
                addChatbotMessage("No more similar furniture available.");
                document.getElementById("suggested-furniture-section").style.display = "none";
            }
        }


        // Initialize SegDrawer
        function initializeSegDrawer() {
            const uploadedImage = document.getElementById("uploaded-image");
            const canvas = document.getElementById("mask-canvas");

            // Set canvas dimensions to match the uploaded image
            canvas.width = uploadedImage.clientWidth;
            canvas.height = uploadedImage.clientHeight;
            canvas.style.display = "block";

            // Initialize SegDrawer with segmentation tools
            segDrawer = new SegDrawer(canvas, {
                image: uploadedImage,
                brushSize: 15,  // Adjust brush size
                brushColor: "rgba(255, 0, 0, 0.5)",  // Red semi-transparent brush
            });

            console.log("SegDrawer initialized.");
        }


        // Confirm selection and trigger inpainting
        function confirmSelection() {
            console.log("Selection confirmed. Sending mask to backend...");

            // Get the mask from SegDrawer
            const mask = segDrawer.getMask();

            // Convert mask to base64
            const maskBase64 = mask.toDataURL("image/png").split(",")[1];

            // Get the suggested furniture filename
            const suggestedFurniture = sortedSofas[0][0];

            // Prepare the form data
            const formData = new FormData();
            formData.append("suggested_furniture", suggestedFurniture);
            formData.append("mask", maskBase64);

            // Send inpainting request to backend
            fetch(`${backendUrl}/inpainting-image`, {
                method: "POST",
                body: formData,
            })
            .then(response => response.json())
            .then(data => {
                if (data.image) {
                    document.getElementById("inpaintedImage").src = `data:image/png;base64,${data.image}`;
                    document.getElementById("inpainted-image-section").style.display = "block";
                    addChatbotMessage("Furniture replacement completed!");

                    // Show AR View
                    const arModel = document.getElementById("ar-model");
                    arModel.src = `http://127.0.0.1:8000/furniture/${suggestedFurniture.replace(".jpg", ".glb")}`;
                    document.getElementById("ar-viewer").style.display = "block";
                } else {
                    addChatbotMessage("Inpainting failed. Please try again.");
                }
            })
            .catch(error => {
             console.error("Error during inpainting:", error);
                addChatbotMessage("Something went wrong, please try again.");
            });
        }

        // Function to send a message to the chatbot
        async function sendMessage() {
            const userInput = document.getElementById("userInput").value;
            if (!userInput) return;

            // Display user message in the chatbox
            const chatbox = document.getElementById("chatbox");
            const userMessage = document.createElement("p");
            userMessage.innerHTML = `<strong>You:</strong> ${userInput}`;
            chatbox.appendChild(userMessage);
            chatbox.scrollTop = chatbox.scrollHeight;

            // Clear the input field
            document.getElementById("userInput").value = "";

            try {
                const response = await fetch(`${backendUrl}/chat`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ message: userInput })
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }

                const result = await response.json();
                addChatbotMessage(result.message);

                // If the chatbot suggests furniture, update the UI
                if (result.inventory) {
                    displayFurnitureInventory(result.inventory);
                }
            } catch (error) {
                console.error("Error sending message:", error);
                addChatbotMessage("Sorry, something went wrong. Please try again.");
            }
        }

        // Function to display furniture inventory
        function displayFurnitureInventory(inventory) {
            const inventoryContainer = document.getElementById("inventory-container");
            inventoryContainer.innerHTML = ""; // Clear previous inventory

            inventory.forEach(item => {
                if (item.thumbnail) {
                    const imgElement = document.createElement("img");
                    imgElement.src = item.thumbnail;
                    imgElement.alt = item.name;
                    imgElement.classList.add("thumbnail");

                    // Select furniture on click
                    imgElement.onclick = () => {
                        selectedFurniture = item.name;
                        addChatbotMessage(`You selected: ${item.name}`);
                        addChatbotMessage(`Chatbot: ${item.name} costs $${item.price}. ${item.description}`);
                    };

                    inventoryContainer.appendChild(imgElement);
                }
            });
        }

        // Update opacity of the inpainted image
        function updateOpacity() {
            const opacity = document.getElementById("opacity").value;
            document.getElementById("inpaintedImage").style.opacity = opacity;
        }

        // Move the inpainted sofa
        function moveSofa(deltaX, deltaY) {
            const inpaintedImage = document.getElementById("inpaintedImage");
            const currentLeft = parseFloat(inpaintedImage.style.left) || 0;
            const currentTop = parseFloat(inpaintedImage.style.top) || 0;
            inpaintedImage.style.left = `${currentLeft + deltaX}px`;
            inpaintedImage.style.top = `${currentTop + deltaY}px`;
        }

        // Resize the inpainted sofa
        function resizeSofa(scale) {
            const inpaintedImage = document.getElementById("inpaintedImage");
            const currentWidth = parseFloat(inpaintedImage.style.width) || inpaintedImage.width;
            const currentHeight = parseFloat(inpaintedImage.style.height) || inpaintedImage.height;
            inpaintedImage.style.width = `${currentWidth * scale}px`;
            inpaintedImage.style.height = `${currentHeight * scale}px`;
        }

        // Initialize Chatbot
        addChatbotMessage("Hello! How can I help you today?");
    </script>
</body>
</html>

